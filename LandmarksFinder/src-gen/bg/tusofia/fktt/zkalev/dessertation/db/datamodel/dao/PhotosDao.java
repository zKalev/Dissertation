package bg.tusofia.fktt.zkalev.dessertation.db.datamodel.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import bg.tusofia.fktt.zkalev.dessertation.db.datamodel.Photos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHOTOS.
*/
public class PhotosDao extends AbstractDao<Photos, Long> {

    public static final String TABLENAME = "PHOTOS";

    public static class Properties {
        public final static Property Photo = new Property(0, String.class, "photo", false, "PHOTO");
        public final static Property Photo_reference = new Property(1, String.class, "photo_reference", false, "PHOTO_REFERENCE");
        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
    };


    public PhotosDao(DaoConfig config) {
        super(config);
    }
    
    public PhotosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'PHOTOS' (" + //
                "'PHOTO' TEXT," + // 0: photo
                "'PHOTO_REFERENCE' TEXT," + // 1: photo_reference
                "'_id' INTEGER PRIMARY KEY );"; // 2: id
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHOTOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Photos entity) {
        stmt.clearBindings();
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(1, photo);
        }
 
        String photo_reference = entity.getPhoto_reference();
        if (photo_reference != null) {
            stmt.bindString(2, photo_reference);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public Photos readEntity(Cursor cursor, int offset) {
        Photos entity = new Photos( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // photo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo_reference
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Photos entity, int offset) {
        entity.setPhoto(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhoto_reference(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Photos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Photos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
